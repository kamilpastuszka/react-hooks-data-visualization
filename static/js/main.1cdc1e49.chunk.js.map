{"version":3,"sources":["data.js","LineChart.js","App.js","serviceWorker.js","index.js"],"names":["data","temperature","titleStyle","display","justifyContent","Chart","props","react_default","a","createElement","style","chartTitle","LineChart","width","height","chartData","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","Legend","value","YAxis","Tooltip","Line","type","stroke","propTyes","PropTypes","string","isRequired","shape","template","number","App","_useState","useState","_useState2","Object","slicedToArray","weatherData","setWeatherData","useEffect","className","src_LineChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNAAaA,EAAO,CAClB,CACEA,KAAM,MACNC,YAAa,KAEf,CACED,KAAM,MACNC,YAAa,KAEf,CACED,KAAM,MACNC,YAAa,KAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,MAEf,CACED,KAAM,MACNC,YAAa,qFCnCXC,EAAa,CACjBC,QAAS,OACTC,eAAgB,UAGZC,EAAQ,SAAAC,GACZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAOR,GACVK,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,aAEbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,MAAO,IACPC,OAAQ,IACRd,KAAMM,EAAMS,UACZC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAEhDb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAeC,gBAAgB,QAC/Bf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,QAAQ,QACbjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAQC,MAAM,oCAEhBnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,KAAK,WAAWN,QAAQ,cAAcO,OAAO,eAM3D1B,EAAM2B,SAAW,CACfrB,WAAYsB,IAAUC,OAAOC,WAC7BpB,UAAWkB,IAAUG,MAAM,CACzBpC,KAAMiC,IAAUC,OAChBG,SAAUJ,IAAUK,SACnBH,YAGU9B,QC5BAkC,EAjBH,WAAM,IAAAC,EACsBC,mBAAS,IAD/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACII,EADJJ,EAAA,GAOhB,OAJAK,oBAAU,WACRD,EAAe9C,IACd,IAGDO,EAAAC,EAAAC,cAAA,OAAKuC,UAAU,aACbzC,EAAAC,EAAAC,cAACwC,EAAD,CACElC,UAAW8B,EACXlC,WAAY,qCCHAuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1cdc1e49.chunk.js","sourcesContent":["export const data = [\r\n  {\r\n    data: \"Jan\",\r\n    temperature: \"5\"\r\n  },\r\n  {\r\n    data: \"Feb\",\r\n    temperature: \"7\"\r\n  },\r\n  {\r\n    data: \"Mar\",\r\n    temperature: \"9\"\r\n  },\r\n  {\r\n    data: \"Apr\",\r\n    temperature: \"11\"\r\n  },\r\n  {\r\n    data: \"May\",\r\n    temperature: \"14\"\r\n  },\r\n  {\r\n    data: \"Jun\",\r\n    temperature: \"16\"\r\n  },\r\n  {\r\n    data: \"Jul\",\r\n    temperature: \"19\"\r\n  },\r\n  {\r\n    data: \"Aug\",\r\n    temperature: \"19\"\r\n  },\r\n  {\r\n    data: \"Sep\",\r\n    temperature: \"17\"\r\n  },\r\n  {\r\n    data: \"Oct\",\r\n    temperature: \"13\"\r\n  },\r\n  {\r\n    data: \"Nov\",\r\n    temperature: \"10\"\r\n  },\r\n  {\r\n    data: \"Dec\",\r\n    temperature: \"7\"\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Line\r\n} from \"recharts\";\r\n\r\nconst titleStyle = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\"\r\n};\r\n\r\nconst Chart = props => {\r\n  return (\r\n    <div>\r\n      <div style={titleStyle}>\r\n        <h2>{props.chartTitle}</h2>\r\n      </div>\r\n      <LineChart\r\n        width={730}\r\n        height={450}\r\n        data={props.chartData}\r\n        margin={{ top: 30, right: 30, left: 20, bottom: 5 }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"data\">\r\n          <Legend value=\"Average temperature for London\" />\r\n        </XAxis>\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#8884d8\" />\r\n      </LineChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nChart.propTyes = {\r\n  chartTitle: PropTypes.string.isRequired,\r\n  chartData: PropTypes.shape({\r\n    data: PropTypes.string,\r\n    template: PropTypes.number\r\n  }).isRequired\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { data } from \"./data\";\r\nimport LineChart from \"./LineChart\";\r\n\r\nconst App = () => {\r\n  const [weatherData, setWeatherData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setWeatherData(data);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <LineChart\r\n        chartData={weatherData}\r\n        chartTitle={\"Average temperature for London\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}